###
## Validation examples
###

### Valid request
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "Nick",
  "lastName": "Miller",
  "age": 32
}


### Invalid request
POST http://localhost:8080/api/users
Content-Type: application/json

{
"name": "",
"lastName": "",
"age": 0
}

### Invalid request with method arg validation
POST http://localhost:8080/api/users/with-validation
Content-Type: application/json

{
  "name": "Nick",
  "lastName": "Miller",
  "age": 32,
  "registrationDate": "2024-01-01",
  "userType": "FREE",
  "permissions": [
    {
      "type": "users.view",
      "value": true
    },
    {
      "type": "users.create",
      "value": true
    }
  ]
}


### Valid request with method arg validation
POST http://localhost:8080/api/users/with-validation
Content-Type: application/json

{
  "name": "Nick",
  "lastName": "Miller",
  "age": 32,
  "registrationDate": "2024-01-01",
  "userType": "FREE",
  "permissions": [
    {
      "type": "users.view",
      "value": true
    },
    {
      "type": "users.create",
      "value": false
    }
  ]
}


### Poor handling request
GET http://localhost:8080/api/users/poor-handling


###
## WebSocket examples
###

WEBSOCKET ws://localhost:8080/ws/my-handler
Content-Type: application/json // used only for IDE highlighting.

{
    "message": "Send when the WebSocket connection is opened"
}
=== wait-for-server
{
    "message": "Wait for the server message and send the current message as response"
}
===
{
    "message": "Send after previous message without waiting for the server message"
}